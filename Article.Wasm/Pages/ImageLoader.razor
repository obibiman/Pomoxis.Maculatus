@page "/imageloader"

@using System.IO;
@using Tewr.Blazor.FileReader;

@inject HttpClient _client;
@inject IFileReaderService fileReader;

<h1>Upload File!</h1>

<div class="row">
    <div class="col-4">
        <div class="form-group">
            <input type="file" @ref="inputReference" @onchange="async()=>await OpenFileAsync()" />
            <ul>
                <li>File Name: @fileName</li>
                <li>Size: @size</li>
                <li>Type: @type</li>
            </ul>
        </div>
        <button class="btn btn-block btn-success" @onclick="async() => await UploadFileAsync()">Upload File</button>

        @if (!string.IsNullOrWhiteSpace(message))
        {
            <div class="alert alert-success">
                File has been uploaded
            </div>
        }
        <div class="alert-success">File has been selected successfully</div>

        <div class="col-4">
            @if (imagePath != null)
            {
                <img style="width:150px" src="@imagePath" />
            }
        </div>
    </div>
</div>

@functions{
    ElementReference inputReference;
    string message = string.Empty;
    string fileSelectMessage = string.Empty;
    string imagePath = null;

    string fileName = string.Empty;
    string type = string.Empty;
    string size = string.Empty;
    Stream fileStream = null;

    async Task OpenFileAsync()
    {
        //reaf files
        var file = (await fileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();
        if (file == null)
        {
            return;
        }

        //extrat file info

        var fileInfo = await file.ReadFileInfoAsync();
        fileName = fileInfo.Name;
        size = $"{fileInfo.Size}b";
        type = fileInfo.Type;

        using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
        {
            fileStream = new MemoryStream(ms.ToArray());
        }
    }
    async Task UploadFileAsync()
    {
        //create file stream
        var content = new MultipartFormDataContent();

        content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");

        content.Add(new StreamContent(fileStream, (int)fileStream.Length), "Image", fileName);

        var url = "https://localhost:44359";

        var response = await _client.PostAsync($"{url}/api/images", content);

        if (response.IsSuccessStatusCode)
        {
            var uploadedFilename = await response.Content.ReadAsStringAsync();
            imagePath = $"{url}/{uploadedFilename}";
            message = "File has been uploaded successfully";
        }

    }

}